# things used in Code
import sys
import matplotlib.pyplot
register = {"000":"0000000000000000", "001":"0000000000000000","010":"0000000000000000", "011":"0000000000000000", "100":"0000000000000000", "101":"0000000000000000", "110":"0000000000000000", "111":"0000000000000000" }
variable = {}
varDump = []
file = []
x = []
y = []
check = 0
cycle = 1 # first cycle of the clock
def invert(s):
    x = ""
    for i in s:
        if i == "0":
            x += "1"
        elif i == "1":
            x += "0"
    return x
#_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

# floating point number to IEEE 745 format
def bintofloatdec(num,reg):
    first,last = str(num).split(".")
    first = '{0:0b}'.format(int(first))
    last = "0" + "." + last
    list = []
    for i in range(5):
        if last == "0.0":
            break
        last = float(last) * 2
        f,l = str(last).split(".")
        last = "0" + "." + l
        list.append(f)
    floatnum = first + "."
    for i in list:
        floatnum += str(i)
    point = -1
    for i in range(len(floatnum)):
        if floatnum[i] == ".":
            point += i
            break
    a = floatnum
    a = a.replace(".","")
    floatnum = "1."
    for i in range(1,len(a)):
        floatnum += a[i]

    for i in range(5-len(floatnum[2:])):
        floatnum += "0"
    register[reg] = f"00000000{'{0:03b}'.format(int(point))}{floatnum[2:]}"
#_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

# IEEE 745 format to floating point number
def floatbintodec(mant, exp):
    sum = 0.0
    a = 1
    for i in mant:
        sum += float(int(i))/2**a
        a += 1
    ieee = 1.0 + sum
    return ieee * (2**exp)
#_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

# Memory Dump
def MEM(varDump):
    for i in range(len(file)):
        print(file[i][0])
    for i in sorted(variable):
        varDump.append([int(i,2),variable[i]])
    pc = len(file)
    pp = 0
    for i in range(256-len(file)):
        if pp != len(varDump) and pc == varDump[pp][0]:
            print(varDump[pp][1])
            pp += 1
        else:
            print("0000000000000000")
        pc += 1

#_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

# Execution Engine
def typeA(pc):
    global check
    x = int(register[file[pc][0][7:10]],2)
    y = int(register[file[pc][0][10:13]],2)
    fx = floatbintodec(register[file[pc][0][7:10]][11:],int(register[file[pc][0][7:10]][8:11],2))
    fy = floatbintodec(register[file[pc][0][10:13]][11:],int(register[file[pc][0][10:13]][8:11],2))
    if file[pc][0][0:5] == "10000":
        if x+y > 65535:
            a = '{0:0b}'.format(x+y)
            register[file[pc][0][13:]] = a[len(a)-16:]
            register["111"] = "0000000000001000"
            check = 1
        else:
            register[file[pc][0][13:]] = '{0:016b}'.format(x+y)

    elif file[pc][0][0:5] == "10001" :
        if x >= y:
            register[file[pc][0][13:]] = '{0:016b}'.format(x-y)
        else:
            register[file[pc][0][13:]] = '{0:016b}'.format(0)
            register["111"] = "0000000000001000"
            check = 1

    elif file[pc][0][0:5] == "10110":
        if x*y > 65535:
            a = '{0:0b}'.format(x*y)
            register[file[pc][0][13:]] = a[len(a)-16:]
            register["111"] = "0000000000001000"
            check = 1
        else:
            register[file[pc][0][13:]] = '{0:016b}'.format(x*y)

    elif file[pc][0][0:5] == "11010":
        register[file[pc][0][13:]] = '{0:016b}'.format(x^y)

    elif file[pc][0][0:5] == "11011":
        register[file[pc][0][13:]] = '{0:016b}'.format(x|y)

    elif file[pc][0][0:5] == "11100":
        register[file[pc][0][13:]] = '{0:016b}'.format(x&y)

    elif file[pc][0][0:5] == "00000":
        bintofloatdec(fx+fy,file[pc][0][13:])

    elif file[pc][0][0:5] == "00001":
        if fx >= fy:
            if fx - fy >= 1:
                bintofloatdec(fx-fy,file[pc][0][13:])
            else:
                register[file[pc][0][13:]] = "0000000000000000"
                register["111"] = "0000000000001000"
        else:
            register["111"] = "0000000000001000"
#_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

def typeB(pc):
    x = int(file[pc][0][8:],2)
    y = int(register[file[pc][0][5:8]],2)
    if file[pc][0][0:5] == "10010":
        register[file[pc][0][5:8]] = '{0:016b}'.format(x)

    elif file[pc][0][0:5] == "11000":
        y >>= x
        register[file[pc][0][5:8]] = '{0:016b}'.format(y)

    elif file[pc][0][0:5] == "11001":
        y <<= x
        register[file[pc][0][5:8]] = '{0:016b}'.format(y)
    
    elif file[pc][0][0:5] == "00010":
        register[file[pc][0][5:8]] = f"00000000{file[pc][0][8:]}"
        
# _____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

def typeC(pc):
    global check
    x = int(register[file[pc][0][10:13]],2)
    y = int(register[file[pc][0][13:]],2)

    if file[pc][0][0:5] == "10011":
        register[file[pc][0][13:]] = register[file[pc][0][10:13]]
        if file[pc][0][10:13] == "111":
            register["111"] = "0000000000000000"

    elif file[pc][0][0:5] == "10111":
        register["000"] = '{0:016b}'.format(x//y)
        register["001"] = '{0:016b}'.format(x%y)
        
    elif file[pc][0][0:5] == "11101":
       register[file[pc][0][13:]] = invert(register[file[pc][0][10:13]])

    elif file[pc][0][0:5] == "11110":
        if x > y:
            register["111"] = "0000000000000010"
            check = 1
        elif x < y:
            register["111"] = "0000000000000100"
            check = 1
        elif x== y:
            register["111"] = "0000000000000001"
            check = 1

# _____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

def typeD(pc,cycle,x,y):
    x.append(cycle)
    y.append(int(file[pc][0][8:],2))
    x = int(register[file[pc][0][5:8]],2)
    if file[pc][0][0:5] == "10100":
        if file[pc][0][8:] in variable.keys():
            register[file[pc][0][5:8]] = variable[file[pc][0][8:]]
        else:
            register[file[pc][0][5:8]] = "0000000000000000"

    elif file[pc][0][0:5] == "10101":
        variable[file[pc][0][8:]]= register[file[pc][0][5:8]]
# _____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

def typeE(pc):
    x = int(file[pc][0][8:],2)

    if file[pc][0][0:5] == "11111":
        register["111"] = "0000000000000000"
        register["111"] = "0000000000000000"
        return x

    elif file[pc][0][0:5] == "01100":
        if register["111"] == "0000000000000100":
            register["111"] = "0000000000000000"
            return x
        else:
            register["111"] = "0000000000000000"
            return pc

    elif file[pc][0][0:5] == "01101":
        if register["111"] == "0000000000000010":
            register["111"] = "0000000000000000"
            return x
        else:
            register["111"] = "0000000000000000"
            return pc
        

    elif file[pc][0][0:5] == "01111":
        if register["111"] == "0000000000000001":
            register["111"] = "0000000000000000"
            return x
        else:
            register["111"] = "0000000000000000"
            return pc
# _____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
# _____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

# Lodaing memeory from stdin
for line in sys.stdin:
    if "" == line.rstrip():
        break
    file.append(line.strip().split())
file = list(filter(None, file))

pc = 0 # starting from the first instruction
halted = False

while(not halted):
    x.append(cycle)
    y.append(pc)
    cycle += 1
    # getting curernt nstruction and exeuctiing current instruction5)
    if file[pc][0][0:5] == "10000" or file[pc][0][0:5] == "00000" or file[pc][0][0:5] == "10001" or file[pc][0][0:5] == "00001" or file[pc][0][0:5] == "10110" or file[pc][0][0:5] == "11010" or file[pc][0][0:5] == "11100" or file[pc][0][0:5] == "11011": #checking if it's type A
        typeA(pc)

    elif file[pc][0][0:5] == "10010" or file[pc][0][0:5] == "00010" or file[pc][0][0:5] == "11000" or file[pc][0][0:5] == "11001": #checking if it's type B
        typeB(pc)

    elif file[pc][0][0:5] == "10011" or file[pc][0][0:5] == "10111" or file[pc][0][0:5] == "11101" or file[pc][0][0:5] == "11110": #checking if it's type C
        typeC(pc)
    
    elif file[pc][0][0:5] == "10100" or file[pc][0][0:5] == "10101": #checking if's typeD
        typeD(pc,cycle,x,y)

    elif file[pc][0][0:5] == "11111" or file[pc][0][0:5] == "01100" or file[pc][0][0:5] == "01101" or file[pc][0][0:5] == "01111": #checking if it's type E
        check = pc
        pc = typeE(pc)
        if pc != check:
            print('{0:08b}'.format(check),register["000"],register["001"],register["010"], register["011"], register["100"], register["101"],  register["110"],  register["111"])
            continue

    elif file[pc][0][0:5] == "01010": #checking if it's halt
        halted = True
        register["111"] = "0000000000000000"
        print('{0:08b}'.format(pc),register["000"],register["001"],register["010"], register["011"], register["100"], register["101"], register["110"],  register["111"])
        break

    if check:
    # printing the pc and register file
        print('{0:08b}'.format(pc),register["000"],register["001"],register["010"],register["011"],register["100"],register["101"],register["110"],register["111"])
        # updating the pc
        pc = pc + 1
        check = 0
        continue
    register["111"] = "0000000000000000"
    print('{0:08b}'.format(pc),register["000"],register["001"],register["010"],register["011"],register["100"],register["101"],register["110"],register["111"])

    # updating the pc
    pc = pc +1

MEM(varDump)
matplotlib.pyplot.xlabel("Cycle Number")
matplotlib.pyplot.ylabel("Memeory Address")
matplotlib.pyplot.scatter(x,y)
matplotlib.pyplot.show()
